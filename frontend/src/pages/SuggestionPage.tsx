// frontend/src/pages/SuggestionPage.tsx
import React, { useState } from 'react'; 
import axios from 'axios'; 
import type { AxiosError } from 'axios'; 
import { fetchStrategySuggestion } from '../services/api'; 
import type { 
    MultipleSuggestionsApiResponse, 
    SuggestionResponse, 
    BacktestResult, 
    ApiError,
    HistoricalDataPoint, 
    Trade             
} from '../types'; 
import './SuggestionPage.css';
import EquityChart from '../components/EquityChart'; 
import TradesOnPriceChart from '../components/TradesOnPriceChart'; 

// Mappings for Thematic Names and Strategy Types
const G_THEMATIC_SUGGESTION_NAMES: string[] = ["L'√âcureuil Prudent üêøÔ∏è", "Le H√©risson √âquilibr√© ü¶î", "Le Faucon Audacieux ü¶Ö"];

const G_STRATEGY_DISPLAY_NAMES: Record<string, string> = {
  'ichimoku-cloud': 'Ichimoku Cloud',
  'simple-threshold': 'Seuils Simples',
  'rsi-bollinger': 'RSI + Bandes de Bollinger',
  'macd-crossover': 'Croisement MACD',
  'ai-price-prediction': 'Pr√©diction par IA (Exp.)',
  'dual-sma-crossover': 'Croisement Double Moyenne Mobile', 
  'dynamic-support-resistance': 'Support/R√©sistance Dynamique', 
};


type SuggestionFlowStep = 'form' | 'loading' | 'suggestions' | 'result';

const SuggestionPage: React.FC = () => {
  const [currentStep, setCurrentStep] = useState<SuggestionFlowStep>('form');
  const [initialCapital, setInitialCapital] = useState<number>(10000);
  const [riskPercentage, setRiskPercentage] = useState<number>(2); 
  
  const [suggestionsResult, setSuggestionsResult] = useState<MultipleSuggestionsApiResponse | null>(null);
  const [selectedSuggestionForBacktest, setSelectedSuggestionForBacktest] = useState<SuggestionResponse | null>(null);
  
  const [backtestRunResult, setBacktestRunResult] = useState<BacktestResult | null>(null);
  const [isBacktestLoading, setIsBacktestLoading] = useState<boolean>(false);
  const [backtestError, setBacktestError] = useState<string | null>(null);

  const [error, setError] = useState<string | null>(null); 

  const handleLaunchSuggestion = async () => {
    setError(null);
    if (initialCapital <= 0) {
      setError("Le capital initial doit √™tre positif.");
      return;
    }
    if (riskPercentage <= 0 || riskPercentage > 100) {
      setError("Le pourcentage de risque doit √™tre compris entre 1 et 100.");
      return;
    }

    setCurrentStep('loading');
    setSuggestionsResult(null); 
    setSelectedSuggestionForBacktest(null);
    setBacktestRunResult(null); 
    setBacktestError(null);     


    try {
      const result = await fetchStrategySuggestion(
        '', 
        initialCapital,
        undefined, 
        undefined, 
        undefined, 
        riskPercentage,
        undefined  
      );
      setSuggestionsResult(result);
      if (result.suggestions && result.suggestions.length > 0) {
        setCurrentStep('suggestions');
      } else {
        setCurrentStep('suggestions'); 
      }
    } catch (err: any) {
      setError(err.message || "Erreur lors de la r√©cup√©ration des suggestions.");
      setCurrentStep('form'); 
    }
  };

  const handleChooseSuggestion = async (suggestion: SuggestionResponse) => {
    setSelectedSuggestionForBacktest(suggestion);
    setIsBacktestLoading(true);
    setBacktestError(null);
    setBacktestRunResult(null);
    setCurrentStep('result'); 

    try {
      const { suggestedStrategyId, suggestedParameters, symbol } = suggestion;
      if (!suggestedStrategyId || !suggestedParameters || !symbol) {
        setBacktestError("Les d√©tails de la suggestion sont incomplets (ID, param√®tres ou symbole manquants).");
        setIsBacktestLoading(false);
        return;
      }

      const endDate = new Date().toISOString().split('T')[0];
      const startDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

      const backtestRequestBody = {
        strategyId: suggestedStrategyId,
        strategyParams: suggestedParameters,
        symbol: symbol, 
        startDate: startDate,
        endDate: endDate,
        initialCash: initialCapital, 
        sourceApi: 'Binance', 
        interval: '1d',       
      };

      const response = await axios.post<BacktestResult>('/api/backtest', backtestRequestBody);
      setBacktestRunResult(response.data);

    } catch (err: any) {
      const axiosError = err as AxiosError<ApiError>;
      const errorMessage = axiosError.response?.data?.message || axiosError.message || 'An unknown error occurred during backtest.';
      setBacktestError(errorMessage);
    } finally {
      setIsBacktestLoading(false);
    }
  };

  const renderForm = () => (
    <div className="suggestion-form-container">
      <div>
        <label htmlFor="initialCapital">Capital Initial (‚Ç¨):</label>
        <input
          type="number"
          id="initialCapital"
          value={initialCapital}
          onChange={(e) => setInitialCapital(parseFloat(e.target.value) || 0)}
          min="1"
        />
      </div>
      <div>
        <label htmlFor="riskPercentage">Pourcentage du capital par transaction (%):</label>
        <input
          type="number"
          id="riskPercentage"
          value={riskPercentage}
          onChange={(e) => setRiskPercentage(parseFloat(e.target.value) || 0)}
          min="1"
          max="100"
        />
      </div>
      <button onClick={handleLaunchSuggestion} disabled={currentStep === 'loading'}>
        {currentStep === 'loading' ? 'Chargement...' : 'Lancer la suggestion üöÄ'}
      </button>
      {error && <p className="error-message">{error}</p>}
    </div>
  );

  const renderSuggestions = () => {
    if (!suggestionsResult) return null;

    return (
      <div className="suggestions-display-container">
        <h2>Suggestions Re√ßues</h2>
        {suggestionsResult.message && <p><em>{suggestionsResult.message}</em></p>}

        {suggestionsResult.suggestions && suggestionsResult.suggestions.length > 0 ? (
          <div className="suggestions-list-container">
            {suggestionsResult.suggestions.map((suggestion, index) => {
              const thematicName = G_THEMATIC_SUGGESTION_NAMES[index] || `Suggestion Option ${index + 1}`;
              const strategyDisplayName = G_STRATEGY_DISPLAY_NAMES[suggestion.suggestedStrategyId || ''] || suggestion.suggestedStrategyId;
              const riskMaxPerTrade = (initialCapital * riskPercentage / 100).toFixed(2);
              const buttonText = `Choisir et Backtester ${G_THEMATIC_SUGGESTION_NAMES[index] ? G_THEMATIC_SUGGESTION_NAMES[index].split(' ')[1] : `Option ${index + 1}`}`;

              return (
                <div key={index} className="suggestion-card">
                  <h4>
                    {thematicName} {suggestion.symbol && `- ${suggestion.symbol}`}
                    <span className="tooltip-trigger"> ‚ÑπÔ∏è
                      <span className="tooltip-text">
                        {index === 0 ? "Cette approche de trading vise des gains potentiellement plus modestes mais avec une prise de risque g√©n√©ralement consid√©r√©e comme plus faible. Id√©al pour une croissance r√©guli√®re." :
                         index === 1 ? "Une strat√©gie cherchant un √©quilibre entre risque et rendement, visant une performance solide sans exposition excessive." :
                         "Approche plus dynamique visant des rendements potentiellement plus √©lev√©s, ce qui peut impliquer une prise de risque plus cons√©quente."}
                      </span>
                    </span>
                  </h4>
                  <p>
                    <strong>Type de Strat√©gie:</strong> {strategyDisplayName}
                    <span className="tooltip-trigger"> ‚ÑπÔ∏è
                      <span className="tooltip-text">
                        {suggestion.suggestedStrategyId === 'ichimoku-cloud' ? "Strat√©gie de suivi de tendance qui utilise plusieurs lignes et un 'nuage' (Kumo) pour identifier la direction du march√©, les niveaux de support/r√©sistance et g√©n√©rer des signaux." :
                         suggestion.suggestedStrategyId === 'simple-threshold' ? "Ach√®te lorsque le prix d√©passe un seuil haut et vend lorsqu'il passe sous un seuil bas." :
                         suggestion.suggestedStrategyId === 'rsi-bollinger' ? "Combine l'indicateur de momentum RSI (pour surachat/survente) avec les Bandes de Bollinger (volatilit√© et niveaux de prix relatifs)." :
                         suggestion.suggestedStrategyId === 'macd-crossover' ? "Utilise les croisements de la ligne MACD et de sa ligne de signal pour indiquer des changements potentiels de momentum et de tendance." :
                         suggestion.suggestedStrategyId === 'ai-price-prediction' ? "Strat√©gie exp√©rimentale utilisant un mod√®le d'apprentissage machine pour tenter de pr√©dire les mouvements de prix futurs." :
                         "Description non disponible."}
                      </span>
                    </span>
                    {suggestion.suggestedStrategyId && <small> (ID: {suggestion.suggestedStrategyId})</small>}
                  </p>
                  <p>
                    <strong>Performance Estim√©e ({suggestion.evaluationMetricUsed || 'N/A'}):</strong> 
                    {typeof suggestion.evaluationScore === 'number' ? suggestion.evaluationScore.toFixed(2) : 'N/A'}
                    <span className="tooltip-trigger"> ‚ÑπÔ∏è
                      <span className="tooltip-text">
                        {suggestion.evaluationMetricUsed === 'pnl' ? "Profit et Perte (P&L) net simul√© par la strat√©gie sur la p√©riode d'√©valuation interne de l'IA. Un score plus √©lev√© indique une meilleure performance brute." :
                         suggestion.evaluationMetricUsed === 'sharpe' ? "Ratio de Sharpe simul√© sur la p√©riode d'√©valuation interne de l'IA. Mesure le rendement ajust√© au risque (un ratio > 1 est g√©n√©ralement bon)." :
                         suggestion.evaluationMetricUsed === 'winRate' ? "Pourcentage de trades gagnants simul√© sur la p√©riode d'√©valuation interne de l'IA." :
                         "Cette m√©trique indique la performance de la strat√©gie lors de son √©valuation par l'IA."}
                      </span>
                    </span>
                    <small style={{display: 'block', fontSize: '0.8em', fontStyle: 'italic'}}>(Note: Score bas√© sur l'√©valuation IA, pas un ROI direct.)</small>
                  </p>
                  <p><strong>Nombre de trades simul√©s:</strong> N/A (donn√©e non disponible)</p>
                  <p>
                    <strong>Risque max / trade:</strong> {riskMaxPerTrade} ‚Ç¨
                    <span className="tooltip-trigger"> ‚ÑπÔ∏è
                      <span className="tooltip-text">
                        Montant maximum en euros que cette configuration de strat√©gie risquerait sur une seule transaction, calcul√© sur la base de votre 'Capital Initial' et du 'Pourcentage du capital par transaction' que vous avez fournis.
                      </span>
                    </span>
                  </p>
                  
                  {suggestion.suggestedParameters && Object.keys(suggestion.suggestedParameters).length > 0 && (
                    <div>
                      <strong>Param√®tres Sugg√©r√©s Cl√©s:</strong>
                      <ul style={{ listStyleType: 'disc', paddingLeft: '20px', fontSize: '0.9em' }}>
                        {Object.entries(suggestion.suggestedParameters).map(([key, value]) => (
                          <li key={key}><code>{key}</code>: {String(value)}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {suggestion.message && <p style={{fontSize: '0.9em', color: '#555', marginTop: '10px'}}><em>Note interne: {suggestion.message}</em></p>}
                  <button onClick={() => handleChooseSuggestion(suggestion)}>
                    {buttonText}
                  </button>
                </div>
              );
            })}
          </div>
        ) : (
          <p>Aucune suggestion sp√©cifique n'a pu √™tre g√©n√©r√©e avec ces crit√®res.</p>
        )}
        <button onClick={() => setCurrentStep('form')}>Retour au Formulaire</button>
      </div>
    );
  };
  
  const renderBacktestResult = () => (
    <div className="backtest-result-container">
        <h3>
            R√©sultats du Backtest pour : {selectedSuggestionForBacktest?.suggestedStrategyName} 
            {selectedSuggestionForBacktest?.symbol && ` (${selectedSuggestionForBacktest.symbol})`}
        </h3>
        {isBacktestLoading && <p>Chargement du r√©sultat du backtest...</p>}
        {backtestError && <p className="error-message">Erreur du backtest : {backtestError}</p>}
        
        {!isBacktestLoading && !backtestError && backtestRunResult && (
          <>
            <div className="kpi-grid">
              <p><span className="kpi-label">Valeur Initiale du Portefeuille:</span> {backtestRunResult.initialPortfolioValue?.toFixed(2)} ‚Ç¨</p>
              <p>
                <span className="kpi-label">Valeur Finale du Portefeuille:</span> {backtestRunResult.finalPortfolioValue?.toFixed(2)} ‚Ç¨
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">La valeur totale de votre portefeuille (capital + profits/pertes latents et r√©alis√©s) √† la fin de la p√©riode de simulation du backtest.</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">Profit/Perte Total:</span> {backtestRunResult.totalProfitOrLoss?.toFixed(2)} ‚Ç¨
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">Le gain ou la perte net(te) en euros r√©alis√©(e) par la strat√©gie sur l'ensemble de la p√©riode de backtest, par rapport √† votre capital initial.</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">Pourcentage Profit/Perte:</span> {backtestRunResult.profitOrLossPercentage?.toFixed(2)} %
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">Le gain ou la perte total(e) exprim√©(e) en pourcentage de votre capital initial.</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">Nombre Total de Trades:</span> {backtestRunResult.totalTrades}
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">Le nombre total de transactions (achats ou ventes pour ouvrir/cl√¥turer une position) ex√©cut√©es par la strat√©gie pendant la p√©riode de backtest.</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">Ratio de Sharpe:</span> {(backtestRunResult.sharpeRatio !== undefined ? backtestRunResult.sharpeRatio.toFixed(3) : 'N/A')}
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">Mesure la performance d'un investissement par rapport √† un actif sans risque, apr√®s ajustement pour son risque. Un ratio plus √©lev√© indique une meilleure performance pour la quantit√© de risque prise (g√©n√©ralement &gt; 1 est consid√©r√© comme bon, &gt; 2 tr√®s bon).</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">Max Drawdown:</span> {(backtestRunResult.maxDrawdown !== undefined ? (backtestRunResult.maxDrawdown * 100).toFixed(2) + ' %' : 'N/A')}
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">La plus grande perte en pourcentage enregistr√©e depuis un pic de valeur du portefeuille jusqu'√† un creux subs√©quent, avant qu'un nouveau pic ne soit atteint. Indique le risque de perte maximal sur la p√©riode.</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">CAGR (annualis√©):</span> {(backtestRunResult.CAGR !== undefined ? backtestRunResult.CAGR.toFixed(2) + ' %' : 'N/A')}
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">Taux de Croissance Annuel Compos√© (Compound Annual Growth Rate). C'est le taux de rendement annuel moyen g√©om√©trique sur la p√©riode de simulation, si elle durait un an. (Actuellement N/A si non fourni par le backend).</span>
                </span>
              </p>
              <p>
                <span className="kpi-label">Pourcentage de Trades Gagnants:</span> {(backtestRunResult.winningTradesPercentage !== undefined ? backtestRunResult.winningTradesPercentage.toFixed(2) + ' %' : 'N/A')}
                <span className="tooltip-trigger"> ‚ÑπÔ∏è
                  <span className="tooltip-text">Le pourcentage de toutes les transactions effectu√©es qui ont √©t√© cl√¥tur√©es avec un profit. (Actuellement N/A si non fourni par le backend).</span>
                </span>
              </p>
            </div>

            <div className="charts-section">
              {backtestRunResult.portfolioHistory && backtestRunResult.portfolioHistory.length > 0 && (
                <div className="chart-container">
                  <h4>√âvolution du Portefeuille</h4>
                  <EquityChart data={backtestRunResult.portfolioHistory} />
                </div>
              )}

              {backtestRunResult.historicalDataUsed && backtestRunResult.historicalDataUsed.length > 0 && backtestRunResult.trades && (
                <div className="chart-container">
                  <h4>Prix et Transactions</h4>
                  <TradesOnPriceChart 
                    priceData={backtestRunResult.historicalDataUsed as ReadonlyArray<HistoricalDataPoint>} 
                    tradesData={backtestRunResult.trades as ReadonlyArray<Trade>}
                    aiDecisionLog={backtestRunResult.aiDecisionLog} 
                  />
                </div>
              )}
            </div>
          </>
        )}

        {!isBacktestLoading && ( 
          <div style={{marginTop: '20px'}}> 
            <button onClick={() => setCurrentStep('suggestions')}>Retour aux Suggestions</button>
            <button onClick={() => { 
                setCurrentStep('form'); 
                setSuggestionsResult(null); 
                setSelectedSuggestionForBacktest(null); 
                setBacktestRunResult(null); 
                setBacktestError(null);
                setError(null); 
            }}>Retour au Formulaire Initial</button>
          </div>
        )}
    </div>
 );

  return (
    <div className="suggestion-page-container">
      <h2>Suggestions de Strat√©gie</h2>
      <p>Cette page vous aidera √† obtenir des suggestions de strat√©gies de trading bas√©es sur votre capital et votre profil de risque.</p>
      
      {currentStep === 'form' && renderForm()}
      {currentStep === 'loading' && <p>Chargement des suggestions...</p>}
      {currentStep === 'suggestions' && suggestionsResult && renderSuggestions()}
      {currentStep === 'result' && renderBacktestResult()}
    </div>
  );
};

export default SuggestionPage;
